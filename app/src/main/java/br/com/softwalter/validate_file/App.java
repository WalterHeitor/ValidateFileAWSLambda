/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package br.com.softwalter.validate_file;

import br.com.softwalter.validate_file.aws.client.s3.ClientS3;
import br.com.softwalter.validate_file.aws.client.s3.ClientS3Imp;
import br.com.softwalter.validate_file.aws.service.AwsService;
import br.com.softwalter.validate_file.aws.service.AwsServiceImpl;
import br.com.softwalter.validate_file.entity.Person;
import com.amazonaws.AmazonServiceException;
import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.lambda.runtime.events.S3Event;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.sqs.AmazonSQS;
import com.amazonaws.services.sqs.model.SendMessageRequest;
import com.amazonaws.services.sqs.model.SendMessageResult;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

import static com.amazonaws.services.lambda.runtime.events.models.s3.S3EventNotification.*;

public class App implements RequestHandler<S3Event, Void> {

    private static final Logger logger = LoggerFactory.getLogger(App.class.getName());

    private static final AwsService awsService = new AwsServiceImpl();
    private static final ClientS3 clientS3 = new ClientS3Imp();
    private static final AmazonS3 s3Client = clientS3.getS3Client();
//    private static final AmazonS3 s3Client = awsService.getS3Client();
    private static final AmazonSQS sqsClient = awsService.getSqsClient();
    private static final String QUEUE_URL = awsService.getQueueUrl();

    @Override
    public Void handleRequest(S3Event s3Event, Context context) {
        try {
            logger.info("Iniciando processamento!");
            for (S3EventNotificationRecord s3record : s3Event.getRecords()) {

                String bucketName = s3record.getS3().getBucket().getName();
                String objectKey = s3record.getS3().getObject().getKey();
                List<Person> personList = getObjectContent(bucketName, objectKey);
                sendToSQS(personList);

            }
        }catch (Exception e) {
            e.printStackTrace();

        }
        return null;
    }

    public void sendToSQS(List<Person> personList) {


        for (Person person : personList) {

            String messageBody = person.toString();
            SendMessageRequest sendMessageRequest = new SendMessageRequest()
                    .withQueueUrl(QUEUE_URL)
                    .withMessageBody(messageBody);

            SendMessageResult sendMessageResult = sqsClient.sendMessage(sendMessageRequest);
            logger.debug("Mensagem enviada com sucesso. ID da mensagem: {}",  sendMessageResult.getMessageId());
        }

        sqsClient.shutdown();
    }
    public static List<Person> getObjectContent(String bucketName, String objectKey) throws IOException {
        try {

            logger.debug("getObjectContent S3 bucketName: {}", bucketName);
            S3Object object = s3Client.getObject(bucketName, objectKey);
            if (!object.getKey().toLowerCase().endsWith(".csv")) {
                throw new IllegalArgumentException("O arquivo não é um arquivo CSV.");
            }
            InputStream objectData = object.getObjectContent();
            BufferedReader reader;
            reader = getBufferedReader(objectData);

            String headerLine = reader.readLine();
            String[] columns = headerLine.split(","); // Ou qualquer outro separador que seu CSV use

            if (columns.length != 6 ||
                    !columns[0].equals("id") ||
                    !columns[1].equals("first_name") ||
                    !columns[2].equals("last_name") ||
                    !columns[3].equals("email") ||
                    !columns[4].equals("gender") ||
                    !columns[5].equals("ip_address")) {
                throw new IllegalArgumentException("O arquivo CSV não tem o formato esperado.");
            }

            String line;
            List<Person> people = new ArrayList<>();
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length == 6) {
                    String id = parts[0];
                    String firstName = parts[1];
                    String lasName = parts[2];
                    String email = parts[3];
                    String gender = parts[4];
                    String ipAddress = parts[5];

                    Person person = new Person(id, firstName, lasName, email, gender, ipAddress);
                    people.add(person);
                    logger.debug("Added person {}",  person);
                } else {
                    logger.error("Ignorando linha inválida: {}", line);
                }
            }
            reader.close();

            logger.debug("Fim do processamento do arquivo csv!");
            return people;
        } catch (AmazonServiceException e) {
            throw new IOException("Erro ao obter objeto do S3: " + e.getMessage());
        } finally {
            s3Client.shutdown();
        }
    }

    private static BufferedReader getBufferedReader(InputStream objectData) {
        BufferedReader reader;
        try {
            InputStreamReader inputStreamReader = new InputStreamReader(objectData);
            reader = new BufferedReader(inputStreamReader);
        } catch (Exception e) {
            throw new IllegalArgumentException("Erro ao carregar buffer" + e);
        }
        return reader;

    }

    public static void main(String[] args) {

        String bucketName = "my-test-bucket";
        String key = "mock_data.csv";

        S3BucketEntity s3Bucket =
                new S3BucketEntity(bucketName, null, null);
        S3ObjectEntity s3ObjectEntity =
                new S3ObjectEntity(key, null, null, null, null);
        S3Entity s3Entity =
                new S3Entity(null, s3Bucket, s3ObjectEntity, null);
        S3EventNotificationRecord s3EventNotificationRecord =
                new S3EventNotificationRecord(
                        null, null, null, null, null, null, null, s3Entity, null);
        List<S3EventNotificationRecord> s3EventNotificationRecords = List.of(s3EventNotificationRecord);
        S3Event s3Event = new S3Event(s3EventNotificationRecords);

        new App().handleRequest(s3Event, null);
    }

}
